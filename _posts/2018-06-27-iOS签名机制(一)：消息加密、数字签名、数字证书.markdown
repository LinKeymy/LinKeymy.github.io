---
layout: post
title: iOS签名机制(一)：消息加密、数字签名、数字证书
subtitle: 
author: JackLin
date: 2018-06-27 10:56:54 +0800
---

#### 前言

一直以来，针对iOS开发者，特别是刚入行的开发者，apple的签名机制是一个理解的难点，多种证书、描述文件、证书签名请求(CSR)等等，都是一些专业名词，加上apple签名机制的复杂性，难以理出头绪。很多时候也都是在网上找一篇Blog安装具体的流程操作实现证书申请，真机调试，打包调试或者发布App Store。虽然完成了任务，但还是不知其所以然。笔者曾经也被这个主题坑的摸不着头脑，也在淘宝上买过企业证书签名这些服务，有大神都做了一个全自动的发布打包，甚是羡慕和崇拜。于是，花了一点时间去研究了一下iOS这套证书和签名机制，并撰文分享给需要的朋友。由于本人也是查看资料所得的观点，多有遗漏或错误之处，还请大神多多指教。在具体进入iOS这套签名机制之前，笔者认为先了解消息加密、数字签名、数字证书的基本概念是很有帮助的。

#### 信息安全的基本原则

从信息安全的角度看，信息具有3个重要的属性：机密性、完整性、可用性。

* 机密性： 保密内容只能由指定的用户知晓。
* 完整性：发送和接受的信息是完整的，没有被未授权的方式修改。
* 可用性：信息是可以使用的。

上面3个是核心属性，还有其他如：可认证性、不可抵赖性及可审计性。当一个信息在不安全的环境中传播时，需要一下附加的技术来确保安全。iOS的各种签名和证书就是这样的一种保障。

#### 网络通信的威胁

通常的攻击分为两种：被动攻击与主动攻击。被动攻击一般会监视和窃听网络的内容，也有可能会加得到的私密信息公布出去，从而破坏了信息的`机密性`. 主动攻击则是会篡改信息，这会破坏了信息的完整性和可用性。也有可能使某个系统拒绝服务，如DNS攻击（DoS）。

![lice-bo]({{ site.url }}/assets/postsImages/alic_eve_Mallory_bob.jpg)

上图在Alic和Bob通信中，出现了两个攻击者：Eve和Mallory。Eve发起被动攻击，窃听和监听Alic和Bob交换的信息。Mallory既可以存储（被动攻击）、也可以修改和重放（主动攻击）Alic和Bob交换的信息，所以他既可以实施主动攻击也可以实施被动攻击。下面先看被动攻击的情况。

假设Alice发送邮件给Bob

![lice-bo]({{ site.url }}/assets/postsImages/alice-bob.png)

突然某天有个一窃听者Eve窃听到了他们的内容。这是一件很危险的事情。

![lice-eve-bo]({{ site.url }}/assets/postsImages/alice-eve-bob.png)

为了防止类似Eve这样的窃听者，Alice和Bob使用了加密系统进行通信.这样Alice发送的明文都经过了加密变成了密文进行传送。这样Eve只能窃听到密文。Eve无法知道Alice发送给Bob的明文是什么。Bob接收到密文之后对其进行解密便得到了明文。

![lice-bob-encryp]({{ site.url }}/assets/postsImages/alice-bob-encrypt.png)



可以发现对比之前这里多了加密和解密的操作。那么如何进行加密解密呢？

明文通常都需要经过加密算法的处理产生密文。而密钥时用于驱动加密算法的一个特殊的比特序列。

使用密钥进行加密：使用密钥(一串字符)，照按特定的算法对内容加密

![ncrypt-ke]({{ site.url }}/assets/postsImages/encrypt-key.png)

使用密钥进行解密：使用密钥(一串字符)，照按特定的算法对内容解密

![ecryp]({{ site.url }}/assets/postsImages/decrypt.png)

**需要注意的是加密和解密的密钥不一定需要相同。根据密钥的使用方法，可以将密码分为2种：**

> 1. 对称密钥： 加密和解密是同一把钥匙
> 2. 非对称密钥：加密和解密的钥匙不同，存在数学上的联系。



- symmetric cryptography (对称密码)

广义上说就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。只是在大多数的[对称算法](https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E7%AE%97%E6%B3%95)中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密密钥算法或单密钥算法。它要求发送方和接收方在安全通信之前，商定一个密钥。对称算法的安全性依赖于密钥，泄漏密钥就意味着任何人都可以对他们发送或接收的消息解密，所以密钥的保密性对通信的安全性至关重要。

> 这里就简单的理解为：在对称密码中，加密和解密是同一把钥匙

![ymmetric-cryptograph]({{ site.url }}/assets/postsImages/symmetric-cryptography.png)

常见的对称密码算法：

> 1. DES (data encryption standard)
> 2. 3DES (将DES重复2，3次，密钥可以不一样)
> 3. AES （Advanced Encryption Standard）
>    - AES已经逐步取代了DES、3DES成为首选的对称算法

* 公钥密码 （public-key cryptography 也称为：asymmetric cryptography ）

在公钥密码中，密钥分为加密密钥、解密密钥2种，它们不是同一个密钥，但是它们有数学上的联系。

![ublic-key-cryptograph]({{ site.url }}/assets/postsImages/public-key-cryptography.png)

- 加密密钥，一般都是公开的，称为： public key

- 解密密钥，由消息接收者保管，不能公开 称为： private key

  > public key 和 private key 是一一对应的，不能单独生成，一对公钥和私钥统称为 key pair (密钥对)

简而言之，非对称加密就是指加密密钥和解密密钥是不同的，而且加密密钥和解密密钥是成对出现。非对称加密又叫公钥加密。成对的密钥，其中一个是对外公开的，所有人都可以获得，称为公钥，而与之相对应的称为私钥，只有这对密钥的生成者才能拥有。公私钥具有以下重要特性：

- 公钥是公开的，但不可能通过公钥反推出私钥，或者说极难反推，只能穷举，所以只要密钥足够长度，要通过穷举而得到私钥，几乎是不可能的
- 通过私钥加密的密文只能通过公钥解密，公钥加密的密文只有通过私钥解密

**由于上述特性，非对称加密具有以下的典型用法：**

1. 对信息保密，防止中间人攻击：将明文通过接收人的公钥加密，传输给接收人，因为只有接收人拥有对应的私钥，别人不可能拥有或者不可能通过公钥推算出私钥，所以传输过程中无法被中间人截获。只有拥有私钥的接收人才能阅读。此用法通常用于交换`对称密钥`。(**这里解决了密钥的配送问题，公钥匙公开的，不怕窃听者获取，窃听者窃听到密位使用公钥匙匙无法解密得到明文**)。
2. 身份验证和防止篡改：权限狗用自己的私钥加密一段授权明文，并将授权明文和加密后的密文，以及公钥一并发送出来，接收方只需要通过公钥将密文解密后与授权明文对比是否一致，就可以判断明文在中途是否被篡改过。此方法用于`数字签名`。(对于这一个用法，后面进一步说明)

著名的`RSA`算法就是非对称加密算法，`RSA`以三个发明人的首字母命名。非对称加密算法如此强大可靠，却有一个弊端，就是加解密比较耗时。所以就有了混合密码系统和摘要算法。

#### 混合密码系统 (hybrid cryptosystem)

对称密码的缺点： 不能很好地解决密码配送问题

公钥密码的缺点： 加密解密的速度比较慢

混合密码-加密： 接受者将公钥密码给发送方，发送方使用对称密钥对内容加密，使用公钥将对称密钥进行加密。然后将加密后的内容（对称加密）和加密后的密钥（公钥加密）发给接收方。

混合密码-解密： 接受者接收到内容后先使用私钥解密加密后的密钥。将得到的密钥解密内容。

> Alic ———> Bob
>
> 发送过程： 
>
> 1. Alic先生成key pair： public key 和 private key
> 2. Alic把public key共享给Bob
> 3. Bob随机生成一个临时的会话密钥
> 4. Bob使用会话密钥对消息进行加密 （对称密码）
> 5. Bob用public key 对会话密钥进行加密 （非对称密码）
> 6. Bob把4和5加密的结果一并发送给Alic
>
> 接收过程：
>
> 1.  Alic用自己的private key解密会话密钥（非对称密码）
> 2. Alic利用会话密钥（1.解密得到的）解密发送过来的消息（对称密码）

#### 密钥的配送问题

发送方将内容加密后，接受方要查看到内容必须进行解密。这样必须将解密的密钥也送给接受方。但是这样如果窃听者也拿到了密钥就很危险，所以这里必须解决密钥的配送问题。

解决密钥配送问题的方法：

> 1. 当面先共享密钥
> 2. 由密钥分配中心配送
> 3. Diffie-Hellman密钥交换协议

#### 摘要算法、数字签名、数字证书

解决密钥配送问题，还有潜在的问题需要解决。其中一个问题就是：Bob接收到的内容有没有可能不是Alice发送的，即是：内容已经被中间人篡改。比如假设Alice送支付宝二维码给Bob，但是有一个中间人Mike拦截了Alice发给Bob的邮件，然后使用相同的公钥加密Mike自己的支付宝二维码发给Bob，这样导致Bob被诈骗。Bob如何确定这段消息的真实性？如何识别篡改、伪装、否认？一个现有的方案就是使用数字签名技术。

##### 单向散列函数（one-way hash function）

单向[散列函数](https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0)，又称单向[Hash函数](https://baike.baidu.com/item/Hash%E5%87%BD%E6%95%B0)、杂凑函数，就是把任意长的输入消息串变化成固定长的输出串且由输出串难以得到输入串的一种函数。这个输出串称为该消息的散列值。一般用于产生[消息摘要](https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81)，[密钥](https://baike.baidu.com/item/%E5%AF%86%E9%92%A5)加密等.

> 符合单向散列这一个特性的函数都是单向散列函数，单向散列函数是某一类型的函数

**单向散列函数的特点：**

1. 加密后密文的长度是定长的(即对任意长度的消息散列,得到的散列值是定长的)
2. 散列计算速度快,非常高效
3. 如果明文不一样，那么散列后的结果一定不一样
4. 如果明文一样，那么加密后的密文一定一样（对相同数据加密，加密后的密文一样）
5. 所有的加密算法是公开的
6. 具备单向性,不可以逆推反算

> 单向散列函数也称为**消息摘要函数(**message digest function**), 哈希函数**(Hash funciotn) 或者 **杂凑函数**
>
> 单向散列函数输出的散列值又称为**消息摘要**(message function) 或者 **指纹**(fingerprint)

**经典算法**
单项散列函数的经典算法,包括 : MD4\MD5\SHA1\SHA256\SHA512…...

- **MD4、MD5**

  MD5全称是Message Digest Algorithm 5,译为"消息摘要算法第5版"是由Rivest 于1991年设计的单项散列函数

  **MD5的特点**

  1. 对字符串进行MD5加密可以得到一个32个字符的密文

     对输入的信息生成唯一的一个128位(1个字符4位)散列值(32个字符)

  2. 加密之后不能根据密文逆推出明文

     根据输出值，不能得到原始的明文，即其过程不可逆

     明文不同，则散列值一定不同

     明文相同，则散列值一定相同

  3. MD5已经被破解（暴力破解-碰撞检测）

- **SHA-1**

  > SHA (Secure Hash Algorithm，译作[安全散列算法](https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95)) 是美国国家安全局 (NSA) 设计，[美国国家标准与技术研究院](https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E9%99%A2)(NIST) 发布的一系列密码散列函数正式名称为 SHA 的家族第一个成员发布于 1993年。然而人们给它取了一个非正式的名称 SHA-0 以避免与它的后继者混淆。两年之后， SHA-1，第一个 SHA 的后继者发布了。 另外还有四种变体，曾经发布以提升输出的范围和变更一些细微设计： SHA-224, SHA-256, SHA-384 和 SHA-512 (这些有时候也被称做 SHA-2)。

  散列函数产生160bit的散列值，目前已经不安全

- **SHA-2**

  SHA-2是SHA-1的改进版本，每个都有更长的讯息摘要。以它们的摘要长度 (以位元计算) 加在原名后面来命名："SHA-256", "SHA-384" 和 "SHA-512"，散列值长度分别是256bit、384bit、512bit。

- **SHA-3**

  SHA-3，之前名为Keccak算法，是一个加密杂凑算法，它不是对SHA-2的改进，而是全新的算法。SHA-3并不是要取代SHA-2，因为SHA-2目前并没有出现明显的弱点。由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密杂凑算法，也就是现在的SHA-3。

>  **摘要算法**:在消息传送过程中的摘要算法是单向散列函数的一个应用，摘要算法主要用于比对信息源是否一致，因为只要源发生变化，得到的摘要必然不同；而且通常结果要比源短很多，所以称为“摘要”。

#### 数字签名

理解了非对称加密和摘要算法，来看一下数字签名。实际上数字签名就是两者结合。假设，Alice有一段消息需要送给Bob，为了防止中途篡改文本内容，保证文本的完整性，以及文本是由Alice发的。首先，先将文本内容通过摘要算法（单向散列函数），得到摘要，再用Alice的私钥对摘要进行加密得到密文，将消息、签名、和私钥对应的公钥一并发布即可。在数字签名中，任何人都可以使用公钥验证签名。

那么如何验证呢？Bob方首先查看公钥是否是Alice的，然后用公钥对密文进行解密得到摘要(散列值)，将文本用同样的摘要算法得到摘要(散列值)，两个摘要进行比对，如果相等那么一切正常。这个过程只要有一步出问题就视为无效。

![igital-signatur]({{ site.url }}/assets/postsImages/digital-signature.png)

如果有人篡改了文件内容或者签名内容，签名验证失败，证明内容会篡改。数字签名的作用不是为了保证机密性，仅仅是为了能够识别内容和发送人。

**使用数字签名可以确保：**

- 完整性、识别消息是否被篡改
- 可认证性，对发送人的认证
- 不可抵赖性，防止消息发送人否认

对比前面提到的公钥密码，其实数字签名就是公钥密码的逆向使用。![ompare-pulic-signatur]({{ site.url }}/assets/postsImages/compare-pulic-signature.png)

数字签名和公钥密码，在Alice同其他人通信的具体表现是：

![4.20.2]({{ site.url }}/assets/postsImages/alice-friends.png)

在公钥密码中，任何人都可以使用公钥进行加密，在数字签名中，任何人都可以使用公钥验证签名。

#### 数字签名无法解决的问题

要正确使用签名，前提是用于验证签名的公钥必须属于真正的发送者，如果公钥将是伪造的，那么数字签名将失效。如下图，Alice发送消息给Bob，为了消息的保密性需要用到Bob的公钥对消息进行加密，因此Alice要先请求拿到Bob的公钥，Mallory窃听到了通信的内容得到将Bob发送给Alice的公钥拦截下来替换为Mallory自己的公钥。这样Alice使用Mallory的公钥加密消息然后发送给Bob，Mallor拦截消息用自己的私钥进行解密，随后Mallory伪造消息后用Bob公钥加密后发送给Bob，Bob收到消息后用自己的钥解密消息。

q

![ertificate-mallor]({{ site.url }}/assets/postsImages/certificate-mallory.png)

所以在验证签名之前，首先得先验证公钥的合法性，如何验证公钥的合法性？数字证书

#### 数字证书：用数字签名数字证书

**何为数字证书？**

- 密码学中的证书，全称叫公钥证书（Public-key Certificate，PKC），跟驾驶证类似
- 里面有姓名、邮箱等个人信息，以及此人的公钥
- 并由认证机构（Certificate Authority，CA）施加数字签名
- CA就是能够认定“公钥确实属于此人”并能够生成数字签名的个人或者组织
  - 有国际性组织、政府设立的组织
  - 有通过提供认证服务来盈利的企业
  - 个人也可以成立认证机构

实际上，数字证书就是通过数字签名实现的数字化的证书。在一般的证书组成部分中，还加入了其他的信息，比如证书有效期（好比驾驶证初次申领后6年有效），过了有效期，需要重新签发（驾驶证6年有效后需重新申领）。

跟现实生活中的签发机构一样，数字证书的签发机构也有若干，并有不同的用处。比如苹果公司就可以签发跟苹果公司有关的证书，而跟web访问有关的证书则是又几家公认的机构进行签发。这些签发机构称为`CA`（Certificate Authority）。

对于被签发人，通常都是企业或开发者。比如需要搭建基于SSL的网站，那么需要从几家国际公认的CA去申请证书；再比如需要开发iOS的应用程序，需要从苹果公司获得相关的证书。这些申请通常是企业或者开发者个人提交给CA的。当然申请所需要的材料、资质和费用都各不相同，是由这些CA制定的，比如苹果要求$99或者$299的费用。

之所以要申请证书，当然是为了被验证。英语6级证书的验证方一般是用人单位；web应用相关的SSL证书的验证方通常是浏览器；iOS各种证书的验证方是iOS设备。我们之所以必须从CA处申请证书，就是因为CA已经将整个验证过程规定好了。对于iOS，iOS系统已经将这个验证过程固化在系统中了，除非越狱，否则无法绕过。在每一台iOS的设备中都应该有Apple的公钥。

**有了数字证书Alice和Bob的通信**

Alice要求Bob去找"证书中心"（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对Bob的公钥和一些相关信息一起加密，生成"数字证书"（Digital Certificate）。Alice拿到数字证书以后，使用认证机构的公钥验证数字签名(这里就是证书)，可以得到合法的Bob的公钥。可以看到，数字证书的就出现就是为了防止公钥被伪造。

![igital-certificate]({{ site.url }}/assets/postsImages/digital-certificates.png)

#### What Next？

了解了消息加密、数字签名、数字证书等内容后，就可以有助于了解iOS签名机制的 .certSigningRequest .cer .mobileprovision等文件的作用，和Apple为何要设置这套如何恶心的机制的缘由了。接下来，一起看看如何iOS签名机制中的如何申请证书、代码签名、授权机制 (Entitlements) 和配置文件 (Provisioning)等等。