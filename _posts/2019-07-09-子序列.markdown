---
layout: post
title: 最大子序列和问题的求解
subtitle: 4个方法的实现和思考
author: ALin
date: 2019-07-09 22:58:59 +0800

---

#### 问题描述：



给出一组整数 A[0]   A[1] ….  A[n-2]  A[n-1] ，求出这组数字子序列和中的最大值。



#### 1. 穷举法

这个方法比较明显，容易理解，枚举出每一个子序列，将最大和记录并返回。假设最某个子序列为 A[i]  A[i+1 ] … A[j-1] A[j],其中 A[i] 为子序列的第一项，A[j]为子序列的最后一项，该子序列的和为$\displaystyle \sum^{j}_{k= i}{A_{}[k]}$ 。$i\in [0,   n-1]$, 确定首项下标i后，尾项下标 $j\in[i, {n-1}]$ , 精确的分析结果由和$\displaystyle \sum^{n-1}_{i= 0}{}$ $\displaystyle \sum^{n-1}_{j= i}{}$ $\displaystyle \sum^{j}_{k= i}{1}$ 得到。

$\displaystyle \sum^{n-1}_{i= 0}{}$ $\displaystyle \sum^{n-1}_{j= i}{}$ $\displaystyle \sum^{j}_{k= i}{1}$  = $\frac{n^3 + 3n^2+2n}{6}$   .  显然算法是 O($N^3$)。



![有帮助的截图]({{ site.url }}/assets/postsImages/max_subSum_algorithm_1.png)

```c++
/*
 设 
 i =  5
 j =  5     6    7      .....
 k =  5    5 6  5 6 7
 所以 for (int k = i; i <= j; ++k)
 
 O(N^3)
 */
int max_sub_sum_1(const vector<int> &vec) {
    int max_sum = 0;
    for (int i = 0; i < vec.size(); ++i) {
        for (int j = i; j < vec.size(); ++j) {
            int thisSum = 0;
            for (int k = i; k <= j; ++k) {
                thisSum += vec[k];
            }
            if (thisSum > max_sum) {
                max_sum = thisSum;
            }
        }
    }
    return max_sum;
}

```



#### 2. 简化穷举法

算法1过于低效，它做了大量重复的工作。

![有帮助的截图]({{ site.url }}/assets/postsImages/max_subSum_algorithm_2.png)

通过观察 $\displaystyle \sum^{j}_{k= i}{A_k}$ = $A_j +  \displaystyle \sum^{j-1}_{k= i}{A_{k}}$ 可以看出。每次变化都会丢弃掉上一次j-1的求和 $ \displaystyle \sum^{j-1}_{k= i}{A_{k}}$ 。下面是改进的算法。精确的分析结果由和$\displaystyle \sum^{n-1}_{i= 0}{}$ $\displaystyle \sum^{n-1}_{j= i}{}$ 1 得到。

$\displaystyle \sum^{n-1}_{i= 0}{}$ $\displaystyle \sum^{n-1}_{j= i}{}$ 1  = $\frac{n^2+n}{2}$   .  显然算法是 O($N^2$)。

```c++

/*
 设  i = 5，  j = 7
    j =  5      6      7      .....
  sum =  5    5 + 6  5 + 6 +7
 j的后面的一项的和等于前面求得的；j = 7 时 为 (5 + 6) + 7
  O(N^2)
 */
int max_sub_sum_2(const vector<int> &vec){
    int max_sum = 0;
    for (int i = 0; i < vec.size(); ++i) {
        int thisSum = 0;
        for (int j = i; j < vec.size(); ++j) {
            thisSum += vec[j];
            // 重复了前面的求和过程
//            for (int k = i; k <= j; ++k) {
//                thisSum += vec[k];
//            }
            if (thisSum > max_sum) {
                max_sum = thisSum;
            }
        }
    }
    return max_sum;
}
```



#### 3. 分治-递归 策略

首先确定中间一项 A[k] ，其中 k =  n / 2 ,最大子序列可能出现在3处：

1.  A[0]   A[1] …...  A[i] ….. A[k] 
2. A[k+1]   A[k+2] …...  A[j] ….. A[n-1] 
3. A[x] …...  A[k] ….. A[y]     $x <=y, x\in[0, k], y\in[k, n-1]$



![有帮助的截图]({{ site.url }}/assets/postsImages/max_subSum_algorithm_3.png)

那么现在的问题变成了，我们要分别找出1 、2、3 种情况下的最大子序列 ，最后maxSum = max(cond_1,cond_2,cond_3).  我们将一个大的问题，切分成了更小的问题。对于小的问题，重复上面的分析，可以进一步逼近基准情况，最后等到整个问题的解。具体的代码实现如下：

```c++
/*
 最大子序列的递归算法
 */
// 求三个数的最大值
int max3_int(int a, int b, int c) {
    int max_ab = max(a, b);
    return max(max_ab,c);
}

int maxSubRec(const vector<int> &vec,int left, int right) {
    if (left == right) {
        if (vec[left] > 0) {
            return vec[left];
        } else {
            return 0;
        }
    }
    
    int center = (left + right) / 2;
   // 左边部分的最大子序列和
    int sum_leftRec = maxSubRec(vec, left, center);
   // 右边部分的最大子序列和
    int sum_rightRec = maxSubRec(vec, center + 1, right);
    
     // 中间_的左子部分最大和
    int leftBorderSum = 0, max_leftBorderSum = 0;
    for (int i = center; i >= left; --i) {
        leftBorderSum += vec[i];
        if (leftBorderSum > max_leftBorderSum) {
            max_leftBorderSum = leftBorderSum;
        }
    };
    
    // 中间_的右子部分最大和
    int rightBorderSum = 0, max_rightBorderSum = 0;
    for (int j = center + 1; j <= right; ++j) {
        rightBorderSum += vec[j];
        if (rightBorderSum > max_rightBorderSum) {
            max_rightBorderSum = rightBorderSum;
        }
    };
    // 中间部分的最大子序列和
    int max_centerBorderSum = max_rightBorderSum + max_leftBorderSum;
    // 返回前、中、后三个中最大子序列和的。
    return max3_int(sum_leftRec, sum_rightRec, max_centerBorderSum);
};

/*
 o(N(logN)
 */
int max_sub_sum_3(const vector<int> &vec) {
    return maxSubRec(vec, 0, (int)vec.size() - 1);
}

```



#### 4. 贪心算法

碰巧的是，对于这个问题我们不需要知道具体的最佳子序列在哪里，那么i的使用可以从程序上被优化掉，不多在设计算法的时候还是保留i的使用，这次来改进一下上面的算法 2 简化穷举法。我们从下标0开始扫描整个序列。可以得出的结论是，如果A[i] 是负的,那么它一定不是所求子序列的起点，因为把它剔除掉后用A[i+1]作为起点的子序列和更大。类似的，进一步的结论是，任何小于零的子序列都不可能是最大和子序列的前缀。在一个循环中，我们从A[i]扫描到A[j]，每描到一项将它累加前面连续项和大于零的结果中，记录当前最大子序列和。如果发现加入当前扫描项A[j]使得结果为负，那么丢弃前面的所有项。最大子序列和从设为零。从A[j+1]开始扫描，重复之前的工作一直推进到A[n-1].



![有帮助的截图]({{ site.url }}/assets/postsImages/max_subSum_algorithm_4.png)



```c++
/*
 O(N)
 */

int max_sub_sum_4(const vector<int> &vec) {
    int thisSum = 0, max_sum = 0;
    for (int i = 0; i < vec.size(); ++i) {
        thisSum += vec[i];
        if (thisSum > max_sum) {
            max_sum = thisSum;
        } else if (thisSum < 0) {
            thisSum = 0;
        }
    }
    return max_sum;
}


```
